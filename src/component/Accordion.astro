---
import slugify from "slugify";

import type { CollectionEntry } from "astro:content";

type Props = {
    accordionItems: CollectionEntry<"faqs">["data"][];
    title: string;
    isFirstExpanded?: boolean;
    isOnlyOneExpandable?: boolean;
}
const { accordionItems, title, isFirstExpanded, isOnlyOneExpandable} = Astro.props
---

<section aria-labelledby={slugify(title)} 
data-isFirstExpanded={isFirstExpanded} 
data-isOnlyOneExpandable={isOnlyOneExpandable}
class="acc"
>
    <h2 id={slugify(title)}>{title}</h2>
    {
        accordionItems.map((i, index) => (
            <>
            <button id={`question-${slugify(title)}-${index}`}
            aria-controls={`answer-${slugify(title)}-${index}`}
            aria-expanded="false"
            class="acc-question"
            >{i.question}</button>
            <div 
            prio-labelledby={`question-${slugify(title)}-${index}`}
            id={`answer-${slugify(title)}-${index}`}
            class="acc-answer"
            >{i.answer}</div>
            </>
        ))
    }
</section>


<style>
    section{
        display: grid;
        gap: 2rem;
    }
    .acc-answer {
        display: none;
    }
    .acc-question[aria-expanded="true"] + .acc-answer{
        display: block;
    }
</style>

<script>
    const accordions = [...document.querySelectorAll(".acc")] as  HTMLDivElement[];

    const setAriaExpandedFalse = (btn: HTMLButtonElement) =>{
        btn.setAttribute("aria-expanded", "false");
    }

    const isAriaExpanded = (btn: HTMLButtonElement) =>
        JSON.parse(btn.getAttribute("aria-expanded") as string) as boolean;

    const toggleAriaExpanded = (btn: HTMLButtonElement) =>{
        const isExpanded = isAriaExpanded(btn)
        btn.setAttribute("aria-expanded", `${!isExpanded}`)
    }

    accordions.forEach((acc) => {
        //show 1 expancion de datos 
        const isFirstExpanded = acc.hasAttribute
        ("data-isFirstExpanded")
        const isOnlyOneExpandable = acc.hasAttribute("data-isOnlyOneExpandable")
        if(isFirstExpanded){
            const firstBtn = acc.querySelector(".acc-question") as HTMLButtonElement;
            toggleAriaExpanded(firstBtn);
        }

        const accBtns = [...acc.querySelectorAll(".acc-question")] as HTMLButtonElement[]; 

        // set evente lista
        accBtns.forEach((btn) => 
        btn.addEventListener("click", (e) =>{

            const isExpanded = isAriaExpanded(btn);
            //check if all other
            if(isOnlyOneExpandable){
                accBtns.forEach(setAriaExpandedFalse)
            }

            if(!isOnlyOneExpandable && isExpanded){

            } else{
                toggleAriaExpanded(btn);
            }

            // abrir o expandir elementos
        }))
        
        acc.addEventListener("keydown", (e) =>{

            //este el el buton
            const isBtn = [...e.target.classList].includes("acc-question")
            
            if(!isBtn) {
                return;
            }

            const currentButtonIndex = accBtns.indexOf(e.target as HTMLButtonElement);

            if (
                e.key === "ArrowDown" ||
                e.key === "ArrowUd" ||
                e.key === "End" ||
                e.key === "Home"

            ) {
                e.preventDefault()
            }

            switch(e.key){
                case "ArrowDown":
                    if(accBtns.length - 1 === currentButtonIndex) {
                        accBtns[0].focus();
                    } else{
                        accBtns[currentButtonIndex + 1].focus();
                    }
                    break;
                case "ArrowUp":
                    if(currentButtonIndex === 0) {
                        accBtns[accBtns.length - 1].focus();
                    } else{
                        accBtns[currentButtonIndex - 1].focus();
                    }
                    break;
                case "End":
                    accBtns[accBtns.length - 1].focus()
                    break;
                    default:
                    break;
            }
        })
        
    })
</script>